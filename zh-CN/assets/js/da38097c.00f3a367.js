"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[1077],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},44035:function(e,t,n){var a=n(67294),r=n(25026);t.Z=function(e){const t=e.noShadow||!1,n=e.width,i=e.height,l=(0,r.Z)(e.imageSource);return t?a.createElement("div",{className:"figure noshadow"},a.createElement("a",{href:l,target:"_blank"},a.createElement("img",{width:n,height:i,src:l})),a.createElement("p",null,e.children)):a.createElement("div",{className:"figure"},a.createElement("a",{href:l,target:"_blank"},a.createElement("img",{width:n,height:i,src:l})),a.createElement("p",null,e.children))}},29415:function(e,t,n){var a=n(67294),r=n(88678);const i=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}));class l extends a.Component{render(){return a.createElement(r.Z,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:i},this.props.children)}}t.Z=l},88678:function(e,t,n){var a=n(67294);class r extends a.Component{render(){const e=`highlight highlight-${this.props.type}`;return a.createElement("div",{className:e},a.createElement("div",{className:"highlight-heading"},a.createElement("h5",null,a.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),a.createElement("div",{className:"highlight-content"},this.props.children))}}t.Z=r},31217:function(e,t,n){var a=n(67294);class r extends a.Component{render(){return a.createElement("code",null,this.props.children)}}t.Z=r},93054:function(e,t,n){var a=n(67294),r=n(88678);const i=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class l extends a.Component{render(){return a.createElement(r.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:i},this.props.children)}}t.Z=l},3265:function(e,t,n){n.r(t),n.d(t,{assets:function(){return N},contentTitle:function(){return b},default:function(){return R},frontMatter:function(){return k},metadata:function(){return v},toc:function(){return w}});var a=n(3905),r=n(44035),i=n(29415),l=n(31217),o=n(39130),s=n(93054),p=Object.defineProperty,u=Object.defineProperties,d=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,h=Object.prototype.propertyIsEnumerable,g=(e,t,n)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,f=(e,t)=>{for(var n in t||(t={}))m.call(t,n)&&g(e,n,t[n]);if(c)for(var n of c(t))h.call(t,n)&&g(e,n,t[n]);return e};const k={id:"canvas-widgets",title:"\u753b\u5e03\u63a7\u4ef6"},b=void 0,v={unversionedId:"development/ui-development/touchgfx-engine-features/canvas-widgets",id:"development/ui-development/touchgfx-engine-features/canvas-widgets",title:"\u753b\u5e03\u63a7\u4ef6",description:"",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/development/ui-development/touchgfx-engine-features/canvas-widgets.mdx",sourceDirName:"development/ui-development/touchgfx-engine-features",slug:"/development/ui-development/touchgfx-engine-features/canvas-widgets",permalink:"/4.21/zh-CN/docs/development/ui-development/touchgfx-engine-features/canvas-widgets",draft:!1,tags:[],version:"current",frontMatter:{id:"canvas-widgets",title:"\u753b\u5e03\u63a7\u4ef6"},sidebar:"docs",previous:{title:"\u81ea\u5b9a\u4e49\u63a7\u4ef6",permalink:"/4.21/zh-CN/docs/development/ui-development/touchgfx-engine-features/custom-widgets"},next:{title:"\u52a8\u6001\u4f4d\u56fe",permalink:"/4.21/zh-CN/docs/development/ui-development/touchgfx-engine-features/dynamic-bitmaps"}},N={},w=[{value:"Using Canvas Widgets",id:"using-canvaswidgets",level:2},{value:"\u5b58\u50a8\u7a7a\u95f4\u5206\u914d\u548c\u4f7f\u7528",id:"memory-allocation-and-usage",level:2},{value:"TouchGFX Designer\u4e2d\u7684\u5b58\u50a8\u7a7a\u95f4\u5206\u914d",id:"memory-allocation-in-touchgfx-designer",level:3},{value:"\u7528\u6237\u4ee3\u7801\u4e2d\u7684\u5b58\u50a8\u7a7a\u95f4\u5206\u914d",id:"memory-allocation-in-user-code",level:3},{value:"CWR\u5750\u6807\u7cfb",id:"the-cwr-coordinate-system",level:2},{value:"\u81ea\u5b9a\u4e49\u753b\u5e03\u63a7\u4ef6",id:"custom-canvas-widgets",level:2},{value:"Painter",id:"painters-painters",level:2},{value:"Painter classes",id:"painters-classes",level:3},{value:"Tiled bitmaps",id:"painters-tiled",level:3},{value:"\u5b9a\u5236\u7ed8\u56fe\u5668",id:"custom-painters",level:2},{value:"Color painters",id:"painters-color",level:3},{value:"Changing the framebuffer",id:"painters-framebuffer",level:3},{value:"Custom Containers on rotated displays",id:"painters-custom",level:3},{value:"Filling Rule",id:"filling-rule",level:2}],y={toc:w};function R(e){var t,n=e,{components:p}=n,g=((e,t)=>{var n={};for(var a in e)m.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&c)for(var a of c(e))t.indexOf(a)<0&&h.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=f(f({},y),g),u(t,d({components:p,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"\u753b\u5e03\u63a7\u4ef6\u548c\u753b\u5e03\u63a7\u4ef6\u6e32\u67d3\u5668\u662f\u5f3a\u5927\u7684\u591a\u529f\u80fdTouchGFX\u63d2\u4ef6\uff0c\u5728\u4f7f\u7528\u76f8\u5bf9\u8f83\u5c0f\u7684\u5b58\u50a8\u7a7a\u95f4\u7684\u540c\u65f6\u4fdd\u6301\u9ad8\u6027\u80fd\uff0c\u53ef\u63d0\u4f9b\u5e73\u6ed1\u3001\u6297\u952f\u9f7f\u6548\u679c\u826f\u597d\u7684\u51e0\u4f55\u56fe\u5f62\u7ed8\u5236\u3002 \u4f46\u662f\uff0c\u6e32\u67d3\u51e0\u4f55\u56fe\u5f62\u5fc5\u7136\u662f\u6210\u672c\u975e\u5e38\u9ad8\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u4f7f\u7528\u4e0d\u5c0f\u5fc3\uff0c\u5f88\u5bb9\u6613\u5bf9\u5fae\u63a7\u5236\u5668\u8d44\u6e90\u9020\u6210\u6d6a\u8d39\u3002"),(0,a.kt)("p",null,"\u753b\u5e03\u63a7\u4ef6\u6e32\u67d3\u5668\uff08Canvas Widget Renderer\uff0c\u4ee5\u4e0b\u7b80\u79f0CWR\uff09\u662f\u4e00\u79cd\u901a\u7528\u56fe\u5f62API\uff0c\u4e3a\u56fe\u5143\u63d0\u4f9b\u4f18\u5316\u7ed8\u5236\uff0c\u81ea\u52a8\u6d88\u9664\u6700\u591a\u4f59\u7684\u7ed8\u5236\u3002 TouchGFX\u4f7f\u7528CWR\u53ef\u7ed8\u5236\u590d\u6742\u7684\u51e0\u4f55\u56fe\u5f62\u3002 \u901a\u8fc7\u753b\u5e03\u63a7\u4ef6\uff08Canvas Widget\uff09\u5b9a\u4e49\u51e0\u4f55\u56fe\u5f62\u3002 TouchGFX\u652f\u6301\u8bb8\u591a\u753b\u5e03\u63a7\u4ef6\uff0c\u4f46\u662f\u5c31\u50cf\u666e\u901a\u63a7\u4ef6\u4e00\u6837\uff0c\u60a8\u53ef\u4ee5\u521b\u81ea\u5b9a\u4e49\u753b\u5e03\u63a7\u4ef6\u6765\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\u3002 \u753b\u5e03\u63a7\u4ef6\u5b9a\u4e49\u8981\u901a\u8fc7CWR\u7ed8\u5236\u7684\u56fe\u5f62\u7684\u51e0\u4f55\u5f62\u72b6\uff0c\u800c\u56fe\u5f62\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u5b9e\u9645\u989c\u8272\u5219\u7531\u76f8\u5173Painter\u7c7b\u5b9a\u4e49\u3002 \u540c\u6837\u5730\uff0cTouchGFX\u81ea\u5e26\u8bb8\u591aPainter\uff0c\u4f46\u662f\u60a8\u4e5f\u53ef\u4ee5\u521b\u5efa\u81ea\u5b9a\u4e49Painter\u6765\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\u3002"),(0,a.kt)("h2",f({},{id:"using-canvaswidgets"}),"Using Canvas Widgets"),(0,a.kt)("p",null,"TouchGFX\u4e2d\u5176\u4ed6\u63a7\u4ef6\u7684\u5927\u5c0f\u662f\u81ea\u52a8\u8bbe\u7f6e\u7684\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u81ea\u52a8\u83b7\u53d6\u4f4d\u56fe\u63a7\u4ef6\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u3002 \u56e0\u6b64\uff0c\u5728\u4f4d\u56fe\u63a7\u4ef6\u4e0a\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"setXY()")," \u5c06\u4f4d\u56fe\u653e\u7f6e\u5728\u663e\u793a\u5c4f\u4e0a\u5c31\u8db3\u591f\u4e86\u3002"),(0,a.kt)("p",null,"\u753b\u5e03\u63a7\u4ef6\u6ca1\u6709\u9ed8\u8ba4\u5927\u5c0f\uff0c\u5176\u503c\u65e2\u53ef\u4ee5\u81ea\u52a8\u786e\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u4e00\u5f00\u59cb\u5c31\u8bbe\u7f6e\u3002 \u4e0d\u4ec5\u8981\u6ce8\u610f\u4f4d\u7f6e\uff0c\u8fd8\u8981\u6b63\u786e\u5730\u786e\u5b9a\u63a7\u4ef6\u7684\u5927\u5c0f\uff0c\u5426\u5219\u753b\u5e03\u63a7\u4ef6\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5c06\u4e3a\u96f6\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5728\u663e\u793a\u5c4f\u4e0a\u7ed8\u5236\u4efb\u4f55\u5185\u5bb9\u3002"),(0,a.kt)("p",null,"\u56e0\u6b64\uff0c\u4e0d\u8981\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"setXY()"),"\uff0c\u800c\u662f\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"setPosition()")," \u6765\u653e\u7f6e\u548c\u8c03\u6574\u753b\u5e03\u63a7\u4ef6\u7684\u5927\u5c0f\u3002 \u5173\u4e8e\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528\u81ea\u5b9a\u4e49\u753b\u5e03\u63a7\u4ef6\u7684\u793a\u4f8b\u53e6\u8bf7\u53c2\u89c1\u4e0b\u6587Custom Canvas Widget\u90e8\u5206\u3002"),(0,a.kt)("p",null,"\u5728\u8bbe\u7f6e\u4e86\u753b\u5e03\u7a7a\u95f4\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u540e\uff0c\u53ef\u4ee5\u5728\u5176\u5185\u90e8\u7ed8\u5236\u51e0\u4f55\u56fe\u5f62\u3002 \u5750\u6807\u7cfb\u5c06\u4f7f (0, 0) \u4f4d\u4e8e\u63a7\u4ef6\uff08\u4e0d\u662f\u663e\u793a\u5c4f\uff09\u7684\u5de6\u4e0a\u89d2\uff0cX\u8f74\u5411\u53f3\u5ef6\u4f38\u4e14Y\u8f74\u5411\u4e0b\u5ef6\u4f38\u3002"),(0,a.kt)("p",null,"TouchGFX\u8bbe\u8ba1\u5668\u4e5f\u652f\u6301\u201c\u753b\u5e03\u63a7\u4ef6\uff08Canvas Widget\uff09\u201d\uff0c\u8ba9\u4f7f\u7528\u53d8\u5f97\u7b80\u5355\uff0c\u53ef\u81ea\u52a8\u8ba1\u7b97\u5185\u5b58\u9700\u6c42\u548c\u81ea\u52a8\u5206\u914d\u5185\u5b58\u3002"),(0,a.kt)("p",null,"Available Canvas Widgets in the TouchGFX Designer:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",f({parentName:"li"},{href:"../ui-components/shapes/line"}),"Line")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",f({parentName:"li"},{href:"../ui-components/shapes/circle"}),"Circle")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",f({parentName:"li"},{href:"../ui-components/shapes/shape"}),"Shape")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",f({parentName:"li"},{href:"../ui-components/progress-indicators/line-progress"}),"Line Progress")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",f({parentName:"li"},{href:"../ui-components/progress-indicators/circle-progress"}),"Circle Progress"))),(0,a.kt)("p",null,"\u901a\u8fc7TouchGFX Designer\u4f7f\u7528\u8fd9\u4e9b\u63a7\u4ef6\u65f6\uff0c\u53ef\u901a\u8fc7\u663e\u793a\u63a7\u4ef6\u5728\u8fd0\u884c\u65f6\u7684\u72b6\u6001\uff0c\u4f7f\u5f97\u653e\u7f6e\u548c\u5927\u5c0f\u8c03\u6574\u975e\u5e38\u7b80\u5355\u3002"),(0,a.kt)("h2",f({},{id:"memory-allocation-and-usage"}),"\u5b58\u50a8\u7a7a\u95f4\u5206\u914d\u548c\u4f7f\u7528"),(0,a.kt)("p",null,"\u4e3a\u4e86\u751f\u6210\u53cd\u952f\u9f7f\u6548\u679c\u826f\u597d\u7684\u590d\u6742\u51e0\u4f55\u56fe\u5f62\uff0c\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u3002 \u4e3a\u6b64\uff0cCWR\u5fc5\u987b\u5177\u6709\u4e13\u95e8\u5206\u914d\u7684\u5b58\u50a8\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u5728\u6e32\u67d3\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u3002 CWR\u4e0eTouchGFX\u7684\u5176\u4f59\u90e8\u5206\u4e00\u6837\uff0c\u6ca1\u6709\u52a8\u6001\u5b58\u50a8\u7a7a\u95f4\u5206\u914d\u3002"),(0,a.kt)("h3",f({},{id:"memory-allocation-in-touchgfx-designer"}),"TouchGFX Designer\u4e2d\u7684\u5b58\u50a8\u7a7a\u95f4\u5206\u914d"),(0,a.kt)("p",null,"\u5728\u5411\u5c4f\u5e55\u7684\u753b\u5e03\u6dfb\u52a0\u63a7\u4ef6\u65f6\uff0c\u4f1a\u81ea\u52a8\u751f\u6210\u5b58\u50a8\u7f13\u51b2\u533a\u3002 \u7f13\u51b2\u533a\u5927\u5c0f\u57fa\u4e8e\u5c4f\u5e55\u5bbd\u5ea6\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a (\u5bbd\u5ea6 ","\xd7"," 3) ","\xd7"," 5\u3002 \u4f46\u662f\uff0c\u8fd9\u5e76\u975e\u6240\u6709\u60c5\u51b5\u4e0b\u7684\u7406\u60f3\u7f13\u51b2\u533a\u5927\u5c0f\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u91cd\u5199\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/screen-canvas-buffer-override-4.17.webp",mdxType:"Figure"},"\u5728\u5c4f\u5e55\u5c5e\u6027\u4e2d\u91cd\u5199\u753b\u5e03\u7f13\u51b2\u533a\u5927\u5c0f"),(0,a.kt)(s.Z,{mdxType:"Note"},"It is also possible to generate a memory buffer, for screens that doesn't use Canvas Widgets, by using the override functionality described above. This is useful when creating Canvas Widgets in User Code."),(0,a.kt)("h3",f({},{id:"memory-allocation-in-user-code"}),"\u7528\u6237\u4ee3\u7801\u4e2d\u7684\u5b58\u50a8\u7a7a\u95f4\u5206\u914d"),(0,a.kt)("p",null,"If you don't use the TouchGFX Designer to allocate a memory buffer for screens that uses Canvas Widgets, you must manually setup a buffer. It is recommended to do this in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Screen::setupScreen")," method."),(0,a.kt)("p",null,"Add this to your Screen class definition as private members:"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"private:\n  static const uint16_t CANVAS_BUFFER_SIZE = 3600;\n  static uint8_t canvasBuffer[CANVAS_BUFFER_SIZE]\n")),(0,a.kt)("p",null,"Then in ",(0,a.kt)("inlineCode",{parentName:"p"},"setupScreen()")," method of ",(0,a.kt)("inlineCode",{parentName:"p"},"ScreenView.cpp")," the following line setting up the buffer can be added."),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"void ScreenView::setupScreen()\n{\n    ...\n    CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);\n    ...\n}\n")),(0,a.kt)("p",null,"And in the destrcutor ",(0,a.kt)("inlineCode",{parentName:"p"},"~ScreenView()")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"ScreenView.hpp")," the following line resetting the buffer can be added."),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"virtual ~ScreenView()\n{\n    touchgfx::CanvasWidgetRenderer::resetBuffer();\n}\n")),(0,a.kt)("p",null,"\u9700\u8981\u7684CWR\u5b58\u50a8\u7a7a\u95f4\u7684\u91cf\u53d6\u51b3\u4e8e\u8981\u5728\u5e94\u7528\u4e2d\u7ed8\u5236\u7684\u6700\u5927\u56fe\u5f62\u5927\u5c0f\u3002 \u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u4fdd\u7559\u6bd4\u6700\u590d\u6742\u5f62\u72b6\u6240\u9700\u5185\u5b58\u7a7a\u95f4\u66f4\u5c11\u7684\u5185\u5b58\u3002 To handle this situation, the CWR splits the drawing of shapes into smaller framebuffer parts resulting in slightly longer rendering time, as shapes in these cases will sometimes have to be rendered more than once. \u5728\u6a21\u62df\u5668\u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0c\u53ef\u4ee5\u66f4\u7ec6\u81f4\u5730\u67e5\u770b\u5b58\u50a8\u7a7a\u95f4\u6d88\u8017\u5e76\u8fdb\u884c\u5fae\u8c03\u3002 \u53ea\u9700\u5411main.cpp\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u51fd\u6570\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"CanvasWidgetRenderer::setWriteMemoryUsageReport(true);\n")),(0,a.kt)("p",null,"\u73b0\u5728\uff0c\u65e0\u8bba\u7ed8\u5236\u64cd\u4f5c\u4f55\u65f6\u7ed3\u675f\uff0cCWR\u90fd\u5c06\u62a5\u544a\uff08\u5728\u63a7\u5236\u53f0\u4e0a\u6253\u5370\uff09\u6240\u9700\u5b58\u50a8\u7a7a\u95f4\u7684\u5927\u5c0f\u3002 \u5bf9\u4e8ecanvas_widget_example\uff0c\u53ef\u4ee5\u662f\u201cCWR\u9700\u89813604\u5b57\u8282\u201d\uff08\u7b2c\u4e00\u4e2a\u7ed8\u5236\u64cd\u4f5c\uff09\uff0c\u7136\u540e\u662f\u201cCWR\u9700\u89817932\u5b57\u8282\uff084328\u5b57\u8282\u7f3a\u5931\uff09\u201d\uff08\u7b2c\u4e8c\u4e2a\u7ed8\u5236\u64cd\u4f5c\uff09\u3002 \u5c3d\u7ba1\u663e\u793aCWR\u6ca1\u6709\u8db3\u591f\u5b58\u50a8\u7a7a\u95f4\uff08\u672c\u4f8b\u4e2d\u4e3a4328\u5b57\u8282\u7f3a\u5931\uff09\uff0c\u5e94\u7528\u4ecd\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u662f\u56e0\u4e3aCWR\u68c0\u6d4b\u5230\u53ef\u7528\u4e8e\u5b8c\u6210\u4e00\u6b21\u8fd0\u884c\u4e2d\u590d\u6742\u7ed8\u5236\u64cd\u4f5c\u7684\u5b58\u50a8\u7a7a\u95f4\u592a\u5c11\u3002 \u4e3a\u6b64\uff0c\u5b83\u5c06\u7ed8\u5236\u64cd\u4f5c\u5206\u5272\u6210\u4e24\u9879\u72ec\u7acb\u7684\u7ed8\u5236\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u7ed8\u5236\u56fe\u5f62\uff0c\u4f46\u9700\u8981\u66f4\u591a\u65f6\u95f4\u6e32\u67d3\u3002"),(0,a.kt)("p",null,"\u56e0\u6b64\uff0c\u8bbe\u7f6e\u6b63\u786e\u7684\u5b58\u50a8\u7f13\u51b2\u533a\u5927\u5c0f\u4ee5\u4fbf\u5728\u5b58\u50a8\u7a7a\u95f4\u4e0e\u6027\u80fd\uff08\u6e32\u67d3\u65f6\u95f4\uff09\u4e4b\u95f4\u53d6\u5f97\u5e73\u8861\u3002 \u597d\u7684\u8d77\u59cb\u503c\u901a\u5e38\u7ea6\u4e3a3000\uff0c\u4f46\u4f7f\u7528\u4e0a\u8ff0\u6280\u5de7\u901a\u5e38\u53ef\u4ee5\u786e\u5b9a\u66f4\u4f18\u503c\u3002 If the shape is too complex and the allocated memory buffer is way too small, part of the shape will not be drawn (some vertical pixel lines will be skipped) and it is possible that nothing is drawn at all. \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u6e32\u67d3\u65f6\u95f4\u90fd\u4f1a\u589e\u52a0\u8bb8\u591a\u3002"),(0,a.kt)("p",null,"\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u5e0c\u671b\u5e94\u7528\u4ee5\u6700\u5feb\u901f\u5ea6\u6e32\u67d3CWR\u7ed8\u56fe\uff0c\u60a8\u9700\u8981\u6ee1\u8db3\u5206\u914d\u8bf7\u6c42\u7684\u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u3002 But if you can go with a slower rendering time it is perfectly okay to reduce the memory buffer."),(0,a.kt)("h2",f({},{id:"the-cwr-coordinate-system"}),"CWR\u5750\u6807\u7cfb"),(0,a.kt)("p",null,"TouchGFX\u4e2d\u7684\u5750\u6807\u7cfb\u901a\u5e38\u7528\u4e8e\u5bfb\u5740\u50cf\u7d20\uff0c\u4ee5\u4fbf\u5728\u663e\u793a\u5c4f\u4e0a\u5b9a\u4f4d\u4f4d\u56fe\u3002 \u4f4d\u56fe\u3001\u6587\u672c\u548c\u5176\u4ed6\u56fe\u5f62\u5143\u7d20\u90fd\u4f4d\u4e8e\u5750\u6807\u7cfb\u4e2d\uff0c\u5176\u4e2d (0,0) \u662f\u5de6\u4e0a\u89d2\u50cf\u7d20\uff0cX\u8f74\u5411\u53f3\u5ef6\u4f38\uff0cY\u8f74\u5411\u4e0b\u5ef6\u4f38\u3002 \u5728CWR\u4e2d\uff0c\u80fd\u591f\u4f7f\u7528\u6574\u6570\u5bfb\u5740\u50cf\u7d20\u662f\u4e0d\u591f\u7684\uff0c\u5c3d\u7ba1\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u5df2\u7ecf\u8db3\u591f\uff0c\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\u8fdc\u8fdc\u4e0d\u591f\u3002 \u4e3a\u4e86\u8bc1\u660e\u8fd9\u4e00\u70b9\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u7ebf\u5bbd\u4e3a1\u7684\u5706\uff0c\u5fc5\u987b\u88ab\u7cbe\u786e\u5730\u5d4c\u5165\u4e00\u4e2a5x5\u50cf\u7d20\u7684\u65b9\u5757\u4e2d\u3002 The center of this circle must be at (2.5, 2.5) and the radius must be 2 (the line is drawn .5 out from both sides of the circumference), so fractions are required for the center coordinate. \u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u5706\u5e94\u5d4c\u5165\u4e00\u4e2a6x6\u50cf\u7d20\u7684\u65b9\u5757\uff0c\u5219\u4e2d\u5fc3\u5fc5\u987b\u4f4d\u4e8e (3, 3)\uff0c\u534a\u5f84\u5fc5\u987b\u662f2.5\uff0c\u56e0\u6b64\u534a\u5f84\u9700\u4e3a\u5c0f\u6570\u3002"),(0,a.kt)("p",null,"\u8fd9\u79cd\u65b0\u7684\u56fe\u5f62\u7ed8\u5236\u5750\u6807\u5bfb\u5740\u65b9\u5f0f\u610f\u5473\u7740 (0,0) \u5904\u50cf\u7d20\u7684\u4e2d\u5fc3\u7684CWR\u5750\u6807\u4e3a (0.5, 0.5)\u3002 \u56e0\u6b64\uff0c\u5305\u542b\u5c4f\u5e55\u5de6\u4e0a\u89d2\u50cf\u7d20\u7684\u65b9\u5757\u7684\u8f6e\u5ed3\u5982\u4e0b\uff1a(0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0)\u3002"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/cwr-coordinate-system.webp",mdxType:"Figure"},"(0,0) \u5904\u50cf\u7d20\u7684CWR\u5750\u6807\u7cfb"),(0,a.kt)("p",null,"\u5c3d\u7ba1\u6700\u521d\u770b\u8d77\u6765\u4ee4\u4eba\u56f0\u60d1\uff0c\u4f46\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u662f\u5341\u5206\u81ea\u7136\u7684\u3002 \u4f4d\u56fe\u7684\u5750\u6807\u7cfb\u5bfb\u5740\u50cf\u7d20\uff0c\u753b\u5e03\u63a7\u4ef6\u7684\u540c\u4e00\u5750\u6807\u7cfb\u5bfb\u5740\u50cf\u7d20\u4e4b\u524d\u6709\u95f4\u9699\u3002"),(0,a.kt)("p",null,"Since circles are shapes that often will have to be moved half a pixel to place the center correctly, the function ",(0,a.kt)("inlineCode",{parentName:"p"},"Circle::setPixelCenter()")," will place the circle center at the center of the given pixel, i.e. half a pixel further to the right and down, compared to the coordinates specified."),(0,a.kt)("h2",f({},{id:"custom-canvas-widgets"}),"\u81ea\u5b9a\u4e49\u753b\u5e03\u63a7\u4ef6"),(0,a.kt)("p",null,"\u5b9e\u73b0\u81ea\u5b9a\u4e49\u753b\u5e03\u63a7\u4ef6\u9700\u8981\u7528\u4e0b\u5217\u51fd\u6570\u5b9e\u73b0\u65b0\u7c7b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"virtual bool drawCanvasWidget(const Rect& invalidatedArea) const;\nvirtual Rect getMinimalRect() const;\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"drawCanvasWidget()")," \u5fc5\u987b\u7ed8\u5236\u81ea\u5b9a\u4e49\u63a7\u4ef6\u9700\u8981\u7ed8\u5236\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u5e76\u4e14 ",(0,a.kt)("inlineCode",{parentName:"p"},"getMinimalRect()")," \u5e94\u8be5\u8fd4\u56de Widget \u4e2d\u5305\u542b\u51e0\u4f55\u5f62\u72b6\u7684\u5b9e\u9645\u77e9\u5f62\u3002"),(0,a.kt)(s.Z,{mdxType:"Note"},"\u4f7f\u7528 ",(0,a.kt)(l.Z,{mdxType:"InlineCode"},"getMinimalRect()")," \u7684\u539f\u56e0\u5728\u4e8e\u53ef\u4ee5\u5728\u5176\u63a7\u4ef6\u5185\u90e8\u5230\u5904\u79fb\u52a8\u51e0\u4f55\u56fe\u5f62\uff0c\u5e76\u4e14\u5f53\u5f62\u72b6\u53d8\u4e3a\u4ec5\u4f7f\u6700\u5c0f\u53ef\u80fd\u533a\u57df\u65e0\u6548\u65f6\uff0c\u6539\u53d8\u63a7\u4ef6\u7684\u5927\u5c0f\u548c\u91cd\u65b0\u5b9a\u4f4d\u63a7\u4ef6\u901a\u5e38\u90fd\u4e0d\u5207\u5b9e\u9645\u3002",(0,a.kt)("p",null,"  \u51fd\u6570 ",(0,a.kt)(l.Z,{mdxType:"InlineCode"},"getMinimalRect()")," \u7684\u865a\u62df\u5b9e\u73b0\u53ef\u80fd\u53ea ",(0,a.kt)(l.Z,{mdxType:"InlineCode"},"\u8fd4\u56derect;"),"\u8fd9\u662f\u63a7\u4ef6\u7684\u5927\u5c0f\uff0c\u4f46\u8fd9\u4f1a\u5bfc\u81f4\u88ab\u753b\u5e03\u63a7\u4ef6\u8986\u76d6\u7684\u6574\u4e2a\u533a\u57df\u7684\u91cd\u65b0\u7ed8\u5236\uff0c\u800c\u4e0d\u53ea\u662f\u5305\u542b\u51e0\u4f55\u56fe\u5f62\u7684\u753b\u5e03\u63a7\u4ef6\u7684\u4e00\u90e8\u5206\u3002 \u51e0\u4f55\u56fe\u5f62\u901a\u5e38\u53ea\u5360\u636e\u753b\u5e03\u63a7\u4ef6\u7684\u4e00\u5c0f\u90e8\u5206\u3002")),(0,a.kt)("p",null,"\u753b\u5e03\u63a7\u4ef6\u5168\u90e8\u4f7f\u7528Canvas\u7c7b\uff0c\u5b83\u5982\u4e0a\u6587\u6240\u8ff0\u538b\u7f29Canvas Widget Renderer\u3002 CWR\u6709\u8bb8\u591a\u81ea\u52a8\u5e94\u7528\u7684\u4f18\u5316\uff0c\u5c3d\u7ba1\u77e5\u9053\u51e0\u4f55\u56fe\u5f62\u4e0e\u65e0\u6548\u533a\u57df\u6709\u5173\uff0c\u907f\u514d\u65e0\u6548\u533a\u57df\u4e4b\u5916\u7684\u4e0d\u5fc5\u8981\u7ed8\u5236\uff0c\u59cb\u7ec8\u662f\u4e00\u79cd\u63d0\u5347\u6027\u80fd\u7684\u597d\u65b9\u6cd5\u3002"),(0,a.kt)("p",null,"\u572810x10\u65b9\u5757\u5185\u90e8\u7c97\u7565\u5b9e\u73b0\u4e00\u4e2a\u83f1\u5f62\u5757\uff0c\u65b9\u5f0f\u53ef\u80fd\u50cf\u8fd9\u6837\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"#include <touchgfx/widgets/canvas/CanvasWidget.hpp>\n#include <touchgfx/widgets/canvas/Canvas.hpp>\n\nusing namespace touchgfx;\n\nclass Diamond10x10 : public CanvasWidget\n{\npublic:\n  virtual Rect getMinimalRect() const\n  {\n    return Rect(0,0,10,10);\n  }\n  virtual bool drawCanvasWidget(const Rect& invalidatedArea) const\n  {\n    Canvas canvas(this, invalidatedArea);\n    canvas.moveTo(5,0);\n    canvas.lineTo(10,5);\n    canvas.lineTo(5,10);\n    canvas.lineTo(0,5);\n    return canvas.render(); // Shape is automatically closed\n  }\n};\n")),(0,a.kt)(s.Z,{mdxType:"Note"},"\u540c\u6837\u5730\uff0c\u6ce8\u610f ",(0,a.kt)(l.Z,{mdxType:"InlineCode"},"getMinimalRect()")," \u8fd4\u56de\u5230\u6b63\u786e\u77e9\u5f62\uff0c\u5426\u5219\u5c4f\u5e55\u4e0a\u7684\u56fe\u5f62\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002"),(0,a.kt)("p",null,"In order to see the Diamond10x10 on the display, the color must be set up by passing a Painter to the diamond. Read more about Painters in the next section. \u53e6\u5916\uff0c\u5fc5\u987b\u6b63\u786e\u5730\u653e\u7f6eDiamond10x10\u5e76\u8c03\u6574\u5176\u5927\u5c0f\u3002 \u65b9\u5f0f\u53ef\u80fd\u50cf\u8fd9\u6837\uff1a"),(0,a.kt)("p",null,"\u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"Diamond10x10 box;\nPainterRGB565 myPainter; // For 16bpp displays\n")),(0,a.kt)("p",null,"and in the code you should have something like this in setupScreen():"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"myPainter.setColor(Color::getColorFromRGB(0xFF, 0x0, 0x0));\nbox.setPosition(100,100,10,10);\nbox.setPainter(myPainter);\nadd(box);\n")),(0,a.kt)("h2",f({},{id:"painters-painters"}),"Painter"),(0,a.kt)("p",null,"\u7ed8\u56fe\u5668\u5b9a\u4e49\u4e00\u4e2a\u914d\u8272\u65b9\u6848\uff0c\u7528\u4e8e\u586b\u5145\u2018Canvas Widget\u2019\u5bf9\u8c61\uff0c\u56e0\u6b64\u7ed8\u56fe\u5668\u9700\u8981\u4f7f\u5f62\u72b6\u53ef\u89c1\u3002 \u7ed8\u56fe\u5668\u53ef\u4ee5\u4e3a\u6240\u6709\u50cf\u7d20\u63d0\u4f9b\u5355\u4e00\u989c\u8272\uff08\u4f8b\u5982",(0,a.kt)("inlineCode",{parentName:"p"},"PainterRGB565"),"\uff09\uff0c\u6216\u8005\u4ece\u63d0\u4f9b\u7684\u4f4d\u56fe\u4e2d\u590d\u5236\u6bcf\u4e2a\u50cf\u7d20\uff08\u4f8b\u5982",(0,a.kt)("inlineCode",{parentName:"p"},"PainterRGB565Bitmap"),"\uff09\u3002 Since a painter writes the pixels directly to the framebuffer, the selected painter must match the format of the framebuffer or dynamic bitmap. TouchGFX\u63d0\u4f9b\u7684\u7ed8\u56fe\u5668\u9762\u5411\u6240\u6709\u652f\u6301\u7684\u663e\u793a\u5c4f\uff0c\u4e13\u95e8\u7528\u4e8e\u7eaf\u8272\u6216\u4f4d\u56fe\u7ed8\u5236\u3002"),(0,a.kt)("h3",f({},{id:"painters-classes"}),"Painter classes"),(0,a.kt)("p",null,"The following table lists the available painters in TouchGFX. When you use Canvas Widgets with the TouchGFX Designer, the Designer will select the correct painter, but if you write code yourself that uses Canvas Widgets, you must select a suitable painter."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",f({parentName:"tr"},{align:null}),"Framebuffer format"),(0,a.kt)("th",f({parentName:"tr"},{align:null}),"Color Painter"),(0,a.kt)("th",f({parentName:"tr"},{align:null}),"Bitmap painters"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"BW"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterBW"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterBWBitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"GRAY2"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterGRAY2"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterGRAY2Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"GRAY4"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterGRAY4"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterGRAY4Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"ABGR2222"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterABGR2222"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterABGR2222Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"ARGB2222"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterARGB2222"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterARGB2222Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"BGRA2222"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterBGRA2222"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterBGRA2222Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"RGBA2222"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGBA2222"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGBA2222Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"RGB565"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGB565"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGB565Bitmap, PainterRGB565L8Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"RGB888"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGB888"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGB888Bitmap, PainterRGB888L8Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"ARGB8888"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterARGB8888"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterARGB8888Bitmap, PainterARGB8888L8Bitmap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"XRGB8888"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterXRGB8888"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterXRGB8888Bitmap, PainterXRGB8888L8Bitmap")))),(0,a.kt)("p",null,"The bitmap painters support various bitmap formats:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",f({parentName:"tr"},{align:null}),"Painter"),(0,a.kt)("th",f({parentName:"tr"},{align:null}),"Supported bitmap formats"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterBWBitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"BW, BW_RLE")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterGRAY2Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"GRAY2")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterGRAY4Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"GRAY4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterABGR2222Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"ABGR2222")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterARGB2222Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"ARGB2222")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterBGRA2222Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"BGRA2222")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGBA2222Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"RGBA2222")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGB565Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"RGB565, ARGB8888")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGB565L8Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"L8_RGB565, L8_RGB888, L8_ARGB8888")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGB888Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"RGB888, ARGB8888")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterRGB888L8Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"L8_RGB565, L8_RGB888, L8_ARGB8888")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterARGB8888Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"RGB565, RGB888, ARGB8888")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterARGB8888L8Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"L8_RGB565, L8_RGB888, L8_ARGB8888")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterXRGB8888Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"RGB565 (no transparency), RGB888, ARGB8888")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",f({parentName:"tr"},{align:null}),"PainterXRGB8888L8Bitmap"),(0,a.kt)("td",f({parentName:"tr"},{align:null}),"L8_RGB565, L8_RGB888, L8_ARGB8888")))),(0,a.kt)("h3",f({},{id:"painters-tiled"}),"Tiled bitmaps"),(0,a.kt)("p",null,"Painters that draw pixels from a bitmap puts the bitmap in upper left corner of the Canvas Widget. The pixels of the shape that are outside of the bitmap dimension is not drawn."),(0,a.kt)("p",null,"The bitmap painters can be configured to repeat the widget (tiled) to cover the whole shape."),(0,a.kt)("p",null,"Tiling is enabled by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"setTiled(bool)")," method on your painter:"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"    PainterRGB888Bitmap bitmapPainter;\n    ...\n    bitmapPainter.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_LOGO_TOUCHGFX_LOGO_ID));\n    bitmapPainter.setTiled(true);\n")),(0,a.kt)("p",null,"Tiling can not be enabled in the Designer."),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/tiled-bitmap-painters.webp",mdxType:"Figure"},"An application showing an Image, Circle with bitmap painter, and Circle with tiling bitmap painter."),(0,a.kt)("h2",f({},{id:"custom-painters"}),"\u5b9a\u5236\u7ed8\u56fe\u5668"),(0,a.kt)("p",null,"Even though TouchGFX comes with a set of predefined painter classes covering most use case scenarios, custom painters can also be implemented."),(0,a.kt)("p",null,"In this section we will give a few examples, that can be used as inspiration. The examples are for 16bpp RGB565 only. Slight modifications must be done for other framebuffer formats."),(0,a.kt)("p",null,"A custom painter is just a subclass of the AbstractPainter class. Painters for 16bpp (RGB565) framebuffers can use the AbstractPainterRGB565 class as superclass. Painters for 24bpp (RGB888) framebuffers can use AbstractPainterRGB888 as superclass."),(0,a.kt)("p",null,"These super classes are abstract classes. The custom painter class must implement the method:"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"    virtual void paint(uint8_t* destination, int16_t offset, int16_t widgetX, int16_t widgetY, int16_t count, uint8_t alpha) const = 0;\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"destination")," points to the start position in the framebuffer (the left edge of the widget).",(0,a.kt)("br",{parentName:"p"}),"\n","The ",(0,a.kt)("em",{parentName:"p"},"offset")," is how many pixels from this start position to put the first pixel.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("em",{parentName:"p"},"widgetX"),", ",(0,a.kt)("em",{parentName:"p"},"widgetY")," are the coordinates of the first pixel relative to widget (given in the framebuffer coordinate system).",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("em",{parentName:"p"},"count")," is the number of pixels to draw with the specified ",(0,a.kt)("em",{parentName:"p"},"alpha"),"."),(0,a.kt)("p",null,"The Canvas Widgets will call this method many times, so it is very important that the implementation of ",(0,a.kt)("em",{parentName:"p"},"paint")," is not slow. If the Canvas Widget is not updated often, this is less important."),(0,a.kt)("h3",f({},{id:"painters-color"}),"Color painters"),(0,a.kt)("p",null,"The simplest painter just writes a fixed color to the framebuffer. Here is how to implement that:"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"#include <touchgfx/widgets/canvas/AbstractPainterRGB565.hpp>\nusing namespace touchgfx;\nclass RedPainter : public AbstractPainterRGB565\n{\npublic:\n    virtual void paint(uint8_t* destination, int16_t offset, int16_t widgetX, int16_t widgetY, int16_t count, uint8_t alpha) const\n    {\n        uint16_t* framebuffer = reinterpret_cast<uint16_t*>(destination) + offset; // Address of first pixel to paint\n        const uint16_t* const lineend = framebuffer + count; // Address of last pixel to paint\n        const uint16_t redColor565 = 0xF800;  // Full red in RGB565\n        do\n        {\n            *framebuffer = redColor565;\n        } while (++framebuffer < lineend);\n    }\n};\n")),(0,a.kt)("p",null,"Remember to create an instance of your painter and assign it to your Canvas widget. Add a member of the painter type to your class:"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"Circle myCircle;\nRedPainter myPainter;\n")),(0,a.kt)("p",null,"and in the code you should have something like this in setupScreen():"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"...\nmyCircle.setPainter(myPainter);\n...\n")),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/red-painter.webp",mdxType:"Figure"},"The RedPainter painting a Circle. On the right a magnified part."),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"RedPainter")," class above ignores the alpha parameter. This makes the edges harsh (no alpha-blending) as all pixels are made fully red. We can improve this with a slight code update where we use the ",(0,a.kt)("em",{parentName:"p"},"alpha")," parameter to do blending if needed:"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp",metastring:"{13-20}","{13-20}":!0}),"#include <touchgfx/widgets/canvas/AbstractPainterRGB565.hpp>\nusing namespace touchgfx;\nclass AlphaRedPainter : public AbstractPainterRGB565\n{\npublic:\n    virtual void paint(uint8_t* destination, int16_t offset, int16_t widgetX, int16_t widgetY, int16_t count, uint8_t alpha) const\n    {\n        uint16_t* framebuffer = reinterpret_cast<uint16_t*>(destination) + offset; // Address of first pixel to paint\n        const uint16_t* const lineend = framebuffer + count;\n        const uint16_t redColor565 = 0xF800;  // Full red in RGB565\n        do\n        {\n            if (alpha == 0xFF)\n            {\n                *framebuffer = redColor565; // Write red to framebuffer\n            }\n            else\n            {\n                *framebuffer = alphaBlend(redColor565, *framebuffer, alpha); // Blend red with the framebuffer color\n            }\n        } while (++framebuffer < lineend);\n    }\n};\n")),(0,a.kt)("p",null,"The function ",(0,a.kt)("em",{parentName:"p"},"alphaBlend")," blends two RGB565 pixels with a given alpha for the first pixel. The function is provided by the super class ",(0,a.kt)("em",{parentName:"p"},"AbstractPainterRGB565"),". The circle now has smooth edges with this code:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/red-alpha-painter.webp",mdxType:"Figure"},"The RedAlphaPainter painting a Circle. On the right a magnified part showing alpha blending."),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"WidgetX")," and ",(0,a.kt)("em",{parentName:"p"},"WidgetY")," parameters can be used to restrict the drawing to certain areas. Here is for example a painter that only draws on every other horizontal line. The ",(0,a.kt)("em",{parentName:"p"},"WidgetY")," is used to control that:"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp",metastring:"{8-11}","{8-11}":!0}),"#include <touchgfx/widgets/canvas/AbstractPainterRGB565.hpp>\nusing namespace touchgfx;\nclass StripePainter : public AbstractPainterRGB565\n{\npublic:\n    virtual void paint(uint8_t* destination, int16_t offset, int16_t widgetX, int16_t widgetY, int16_t count, uint8_t alpha) const\n    {\n        if ((widgetY & 2) == 0)\n        {\n            return; // Do not draw anything on line 0,1, 4,5, 8,9, etc.\n        }\n        uint16_t* framebuffer = reinterpret_cast<uint16_t*>(destination) + offset;\n        const uint16_t* const lineend = framebuffer + count;\n        if (alpha == 0xFF)\n        {\n            do\n            {\n                *framebuffer = 0xF800;\n            } while (++framebuffer < lineend);\n        }\n        else\n        {\n            do\n            {\n                *framebuffer = alphaBlend(0xF800, *framebuffer, alpha);\n            } while (++framebuffer < lineend);\n        }\n    }\n};\n")),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/stripe-painter.webp",mdxType:"Figure"},"The StripePainter painting a Circle. On the right a magnified part."),(0,a.kt)("h3",f({},{id:"painters-framebuffer"}),"Changing the framebuffer"),(0,a.kt)("p",null,"The painter in this section does not paint a specific content to the framebuffer, but changes the framebuffer to be gray-scale. It does this by reading the pixel value in the framebuffer (written by the Widgets that are in the background of the Circle), extracting the green component, using this to create a gray color (same value for red, green, blue), and writing that back to the framebuffer."),(0,a.kt)("p",null,"Many similar techniques can be developed using this principle of reading and modifying the framebuffer."),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp",metastring:"{13-14}","{13-14}":!0}),"#include <touchgfx/widgets/canvas/AbstractPainterRGB565.hpp>\n#include <touchgfx/Color.hpp>\nusing namespace touchgfx;\nclass GrayscalePainter : public AbstractPainterRGB565\n{\npublic:\n    virtual void paint(uint8_t* destination, int16_t offset, int16_t widgetX, int16_t widgetY, int16_t count, uint8_t alpha) const\n    {\n        uint16_t* framebuffer = reinterpret_cast<uint16_t*>(destination) + offset;\n        const uint16_t* const lineend = framebuffer + count;\n        do\n        {\n            const uint8_t green = Color::getGreenFromRGB565(*framebuffer) & 0xF8; // Keep only 5 bits of the green\n            const uint16_t color565 = LCD16bpp::getNativeColorFromRGB(green, green, green);\n            if (alpha == 0xFF)\n            {\n                *framebuffer = color565;\n            }\n            else\n            {\n                *framebuffer = alphaBlend(color565, *framebuffer, alpha);\n            }\n        } while (++framebuffer < lineend);\n    }\n};\n")),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/gray-painter.webp",mdxType:"Figure"},"Original background on the left. On the right the Circle painter has changed the inner pixels in the circle to gray-scale."),(0,a.kt)("h3",f({},{id:"painters-custom"}),"Custom Containers on rotated displays"),(0,a.kt)("p",null,"If your application is using a rotated display, the custom container code must take this into account, if it is using the coordinates in the painting."),(0,a.kt)("p",null,"Here is the StripePainter used with a rotated display:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/stripe-painter-rotate90.webp",mdxType:"Figure"},"The StripePainter painting a Circle. On the right a magnified part."),(0,a.kt)("p",null,"The Image, text, and the Button has been rotated by the TouchGFX engine, but we see that the stripes are now perpendicular to the text, where it is supposed to parallel. The lines have not been rotated.",(0,a.kt)("br",{parentName:"p"}),"\n","The problem is that the framebuffer is not rotated, so as the painter paints in sequential addresses (pixels in the framebuffer), the lines are oriented as before (not rotated)."),(0,a.kt)("p",null,"We can fix that by using the ",(0,a.kt)("em",{parentName:"p"},"WidgetX")," to decide if we are painting or not. The ",(0,a.kt)("em",{parentName:"p"},"widgetX")," and ",(0,a.kt)("em",{parentName:"p"},"widgetY")," parameters are given in the framebuffer coordinate system. This means that ",(0,a.kt)("em",{parentName:"p"},"widgetX")," grows when we go down on the display and corresponds to y in the display coordinate system."),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp",metastring:"{15-18,25-28}","{15-18,25-28}":!0}),"#include <touchgfx/widgets/canvas/AbstractPainterRGB565.hpp>\n#include <touchgfx/Color.hpp>\nusing namespace touchgfx;\nclass StripePainterRotate90 : public AbstractPainterRGB565\n{\npublic:\n    virtual void paint(uint8_t* destination, int16_t offset, int16_t widgetX, int16_t widgetY, int16_t count, uint8_t alpha) const\n    {\n        uint16_t* framebuffer = reinterpret_cast<uint16_t*>(destination) + offset;\n        const uint16_t* const lineend = framebuffer + count;\n        if (alpha == 0xFF)\n        {\n            do\n            {\n                if (widgetX++ & 2)\n                {\n                    *framebuffer = 0xF800;\n                }\n            } while (++framebuffer < lineend);\n        }\n        else\n        {\n            do\n            {\n                if (widgetX++ & 2)\n                {\n                    *framebuffer = alphaBlend(0xF800, *framebuffer, alpha);\n                }\n            } while (++framebuffer < lineend);\n        }\n    }\n};\n")),(0,a.kt)("p",null,"The stripes are now correctly oriented:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/stripe-painter-rotate90-fixed.webp",mdxType:"Figure"},"The StripePainterRotate90 painting a Circle."),(0,a.kt)("h2",f({},{id:"filling-rule"}),"Filling Rule"),(0,a.kt)("p",null,"On the Shape widget it is possible to select between two filling rules: ",(0,a.kt)("em",{parentName:"p"},"Fill-Non-Zero")," or ",(0,a.kt)("em",{parentName:"p"},"Fill-Even-Odd"),". The Fill-Non-Zero rule is the default rule. The two figures below illustrate the difference between the two fill rules:"),(0,a.kt)(r.Z,{width:"45%",imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/filling-rule-even-odd.webp",mdxType:"Figure"},"Painting a start Shape using the Fill-Even-Odd rule"),(0,a.kt)(r.Z,{width:"45%",imageSource:"/img/development/ui-development/touchgfx-engine-features/canvas-widgets/filling-rule-non-zero.webp",mdxType:"Figure"},"Painting a start Shape using the Fill-Non-Zero rule"),(0,a.kt)("p",null,"The Even-Odd rule does not paint pixels that you can reach from the outside by crossing an even number (here zero or two) of edges."),(0,a.kt)("p",null,"The Non-Zero rule counts the number of edges going left-to-right on the path to a pixel and subtracting the number of edges going right-to-left. If the count is non-zero the pixel is painted."),(0,a.kt)("p",null,"The fill rule can easily be set in code:"),(0,a.kt)("pre",null,(0,a.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"    touchgfx::Shape<5> shape1;\n    ....\n    shape1.setFillingRule(Rasterizer::FILL_EVEN_ODD);\n")),(0,a.kt)(i.Z,{mdxType:"FurtherReading"},"Wikipedia article on ",(0,a.kt)(o.Z,{to:"https://en.wikipedia.org/wiki/Nonzero-rule",mdxType:"Link"},"Nonzero-rule")))}R.isMDXComponent=!0}}]);