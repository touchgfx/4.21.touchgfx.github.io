"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[9194],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return c}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=s(a),c=r,g=h["".concat(p,".").concat(c)]||h[c]||m[c]||i;return a?n.createElement(g,l(l({ref:t},d),{},{components:a})):n.createElement(g,l({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},22425:function(e,t,a){var n=a(67294);class r extends n.Component{render(){return n.createElement("div",{className:"code-header"},n.createElement("div",null,n.createElement("h5",null,this.props.children)))}}t.Z=r},44035:function(e,t,a){var n=a(67294),r=a(25026);t.Z=function(e){const t=e.noShadow||!1,a=e.width,i=e.height,l=(0,r.Z)(e.imageSource);return t?n.createElement("div",{className:"figure noshadow"},n.createElement("a",{href:l,target:"_blank"},n.createElement("img",{width:a,height:i,src:l})),n.createElement("p",null,e.children)):n.createElement("div",{className:"figure"},n.createElement("a",{href:l,target:"_blank"},n.createElement("img",{width:a,height:i,src:l})),n.createElement("p",null,e.children))}},29415:function(e,t,a){var n=a(67294),r=a(88678);const i=n.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},n.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}));class l extends n.Component{render(){return n.createElement(r.Z,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:i},this.props.children)}}t.Z=l},88678:function(e,t,a){var n=a(67294);class r extends n.Component{render(){const e=`highlight highlight-${this.props.type}`;return n.createElement("div",{className:e},n.createElement("div",{className:"highlight-heading"},n.createElement("h5",null,n.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),n.createElement("div",{className:"highlight-content"},this.props.children))}}t.Z=r},31217:function(e,t,a){var n=a(67294);class r extends n.Component{render(){return n.createElement("code",null,this.props.children)}}t.Z=r},37793:function(e,t,a){var n=a(67294),r=a(88678);const i=n.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},n.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}));class l extends n.Component{render(){return n.createElement(r.Z,{color:"var(--highlight-color-tip)",header:"Tip",type:"tip",icon:i},this.props.children)}}t.Z=l},44168:function(e,t,a){a.r(t),a.d(t,{assets:function(){return v},contentTitle:function(){return b},default:function(){return D},frontMatter:function(){return N},metadata:function(){return y},toc:function(){return w}});var n=a(3905),r=a(44035),i=a(29415),l=a(37793),o=a(31217),p=a(39130),s=a(22425),d=Object.defineProperty,m=Object.defineProperties,h=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,g=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,k=(e,t,a)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,f=(e,t)=>{for(var a in t||(t={}))g.call(t,a)&&k(e,a,t[a]);if(c)for(var a of c(t))u.call(t,a)&&k(e,a,t[a]);return e};const N={id:"dynamic-graph",title:"Dynamic Graph"},b=void 0,y={unversionedId:"development/ui-development/ui-components/miscellaneous/dynamic-graph",id:"development/ui-development/ui-components/miscellaneous/dynamic-graph",title:"Dynamic Graph",description:"",source:"@site/docs/development/ui-development/ui-components/miscellaneous/dynamic-graph.mdx",sourceDirName:"development/ui-development/ui-components/miscellaneous",slug:"/development/ui-development/ui-components/miscellaneous/dynamic-graph",permalink:"/4.21/ja/docs/development/ui-development/ui-components/miscellaneous/dynamic-graph",draft:!1,tags:[],version:"current",frontMatter:{id:"dynamic-graph",title:"Dynamic Graph"},sidebar:"docs",previous:{title:"Static Graph",permalink:"/4.21/ja/docs/development/ui-development/ui-components/miscellaneous/static-graph"},next:{title:"Gauge",permalink:"/4.21/ja/docs/development/ui-development/ui-components/miscellaneous/gauge"}},v={},w=[{value:"Widget Group",id:"widget-group",level:2},{value:"Properties",id:"properties",level:2},{value:"Precision",id:"precision",level:3},{value:"Dynamic Behavior",id:"dynamic-behavior",level:3},{value:"Graph Area, Margin and Padding",id:"graph-area-margin-and-padding",level:3},{value:"Elements",id:"elements",level:3},{value:"Area",id:"area",level:4},{value:"API Reference",id:"api-reference",level:5},{value:"Boxes",id:"boxes",level:4},{value:"API Reference",id:"api-reference-1",level:5},{value:"Diamonds",id:"diamonds",level:4},{value:"API Reference",id:"api-reference-2",level:5},{value:"Dots",id:"dots",level:4},{value:"API Reference",id:"api-reference-3",level:5},{value:"Histogram",id:"histogram",level:4},{value:"API Reference",id:"api-reference-4",level:5},{value:"Line",id:"line",level:4},{value:"API Reference",id:"api-reference-5",level:5},{value:"Grid Lines",id:"grid-lines",level:3},{value:"API Reference",id:"api-reference-6",level:4},{value:"Labels",id:"labels",level:3},{value:"API Reference",id:"api-reference-7",level:4},{value:"Interactions",id:"interactions",level:2},{value:"Actions",id:"actions",level:3},{value:"Triggers",id:"triggers",level:3},{value:"Performance",id:"performance",level:2},{value:"Examples",id:"examples",level:2},{value:"Generated Code",id:"generated-code",level:3},{value:"User Code",id:"user-code",level:3},{value:"TouchGFX Designer Examples",id:"touchgfx-designer-examples",level:3},{value:"API Reference",id:"api-reference-8",level:2}],x={toc:w};function D(e){var t,a=e,{components:d}=a,k=((e,t)=>{var a={};for(var n in e)g.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&c)for(var n of c(e))t.indexOf(n)<0&&u.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=f(f({},x),k),m(t,h({components:d,mdxType:"MDXLayout"}))),(0,n.kt)("p",null,"A Dynamic Graph in TouchGFX is a widget that allows an application to display data points on a monotonous x-axis. The Dynamic Graph supports three types of ",(0,n.kt)("a",f({parentName:"p"},{href:"#dynamic-behavior"}),"dynamic behavior"),", that defines what happens when the graph runs out of space on the x-axis. The chosen dynamic behavior also greatly impacts the ",(0,n.kt)("a",f({parentName:"p"},{href:"#performance"}),"performance")," of the Dynamic Graph, as the behavior chosen impacts the area needed to be redrawn when inserting data points."),(0,n.kt)("p",null,"The Dynamic Graph, can have its visual appearance defined via, ",(0,n.kt)("a",f({parentName:"p"},{href:"#elements"}),"Graph Elements"),", ",(0,n.kt)("a",f({parentName:"p"},{href:"#grid-lines"}),"Grid Lines")," and ",(0,n.kt)("a",f({parentName:"p"},{href:"#labels"}),"Labels")),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/widget-appearance.gif",mdxType:"Figure"},"Dynamic Graph running in the simulator"),(0,n.kt)("h2",f({},{id:"widget-group"}),"Widget Group"),(0,n.kt)("p",null,"The Dynamic Graph can be found in the Miscellaneous widget group in TouchGFX Designer."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/widget-group-v4.17.png",mdxType:"Figure"},"Dynamic Graph in TouchGFX Designer"),(0,n.kt)("h2",f({},{id:"properties"}),"Properties"),(0,n.kt)("p",null,"The properties for a Dynamic Graph in TouchGFX Designer."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Group")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Descriptions")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Name")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Name")," of the widget. ",(0,n.kt)("em",{parentName:"td"},"Name is the unique identifier used in TouchGFX Designer and code"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Location")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"X")," and ",(0,n.kt)("em",{parentName:"td"},"Y")," specify the top left corner of the widget relative to its parent.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"W")," and ",(0,n.kt)("em",{parentName:"td"},"H")," specify the width and height of the widget.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Lock")," specifies if the widget should be locked in its current X, Y, W and H.",(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Locking the widget also disables interacting with the widget through the screen."),(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Visible")," specifies the visibility of the widget. ",(0,n.kt)("em",{parentName:"td"},"Making the widget invisible also disables interacting with the widget through the screen."))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Graph Area Margin")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Margin specifies how much space for graph labels there should be.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Top")," specifies the amount of space above the graph area.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Bottom")," specifies the amount of space below the graph area.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Left")," specifies the amount of space left of the graph area.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Right")," specifies the amount of space right of the graph area.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Graph Area Padding")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Padding specifies how much room around the graph elements inside the graph area there should be.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Top")," specifies the amount of room at the top of the graph area.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Bottom")," specifies the amount of room at the bottom of the graph area.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Left")," specifies the amount of room left of the graph area.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Top")," specifies the amount of room right of the graph area.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Data Points")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Dynamic Behavior")," specifies the behavior of the graph when adding data points, available options are: Wrap And Clear, Scroll and Wrap and Overwrite.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Number of Data Points")," specifies the number of values the graph is capable of showing.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Value Range")," specifies the minimum and maximum y-axis values the graph is capable of showing.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Level of Precision")," specifies how many decimal places the graph is capable of displaying.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Visible Range (index values)")," specifies the range of values shown on the x-axis.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Custom Value Mapping")," specifies the mapping of the index values of the x-axis to custom values.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Generate Random Values")," specifies whether or not random values should be initialized in code generation. ",(0,n.kt)("em",{parentName:"td"},"(Random values will always be shown in the Canvas of the TouchGFX Designer)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Elements")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Area"),", ",(0,n.kt)("em",{parentName:"td"},"Boxes"),", ",(0,n.kt)("em",{parentName:"td"},"Diamonds"),", ",(0,n.kt)("em",{parentName:"td"},"Dots"),", ",(0,n.kt)("em",{parentName:"td"},"Histogram")," and ",(0,n.kt)("em",{parentName:"td"},"Line")," specify which elements make up the widgets visual appearance. ",(0,n.kt)("em",{parentName:"td"},"More than one of each type can be added"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Vertical Grid Lines")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Major Division")," specifies whether or not to enable vertical major division grid lines.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Minor Division")," specifies whether or not to enable vertical minor division grid lines. ",(0,n.kt)("em",{parentName:"td"},"Can only be enabled if Major Division has been enabled"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Horizontal Grid Lines")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Major Division")," specifies whether or not to enable horizontal major division grid lines.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Minor Division")," specifies whether or not to enable horizontal minor division grid lines. ",(0,n.kt)("em",{parentName:"td"},"Can only be enabled if Major Division has been enabled"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"X-Axis Labels")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Major Division")," specifies whether or not to enable major division labels on the x-axis.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Minor Division")," specifies whether or not to enable minor division labels on the x-axis. ",(0,n.kt)("em",{parentName:"td"},"Can only be enabled if Major Division has been enabled"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Y-Axis Labels")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Major Division")," specifies whether or not to enable major division labels on the y-axis.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"Minor Division")," specifies whether or not to enable minor division labels on the y-axis. ",(0,n.kt)("em",{parentName:"td"},"Can only be enabled if Major Division has been enabled"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Appearance")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Alpha")," specifies the transparency of the widget. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Mixins")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"Draggable")," specifies if the widget is draggable at runtime.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"ClickListener")," specifies if the widget emits a callback when clicked.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"FadeAnimator")," specifies if the widget can animate changes to its ",(0,n.kt)("em",{parentName:"td"},"Alpha")," value.",(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("em",{parentName:"td"},"MoveAnimator")," specifies if the widget can animate changes to ",(0,n.kt)("em",{parentName:"td"},"X")," and ",(0,n.kt)("em",{parentName:"td"},"Y")," values.")))),(0,n.kt)("h3",f({},{id:"precision"}),"Precision"),(0,n.kt)("p",null,"Internally the Dynamic Graph stores all data points in a 32 bit integer, therefore to add and display data points with a certain number of digits denoting the degree of accuracy, a level of precision can be defined."),(0,n.kt)("p",null,"If for example the level of precision is set to 0.1, each data point added to the Dynamic Graph, will be multiplied by 10 internally, thereby simulating one digit of precision. However it must be noted that as the level of precision increases, the highest/lowest possible value lowers/increases by the factor of the precision specified."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Level of Precision")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Lowest Possible Value")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Highest Possible Value")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),"1"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"-1 Billion"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"1 Billion")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),"0.1"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"-100 Million"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"100 Million")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),"0.01"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"-10 Million"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"10 Million")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),"0.001"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"-1 Million"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"1 Million")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),"0.0001"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"-100 Thousand"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"100 Thousand")))),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The lowest/highest numbers given above are rough estimations")),(0,n.kt)("h3",f({},{id:"dynamic-behavior"}),"Dynamic Behavior"),(0,n.kt)("p",null,"The Dynamic Graph supports three types of dynamic behavior, Wrap And Clear, Scroll and Wrap and Overwrite. The selected dynamic behavior specifies what will happen once the graph runs out of space on the x-axis, as can be seen in the three demontrations below."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-wrap-and-clear-example.gif",mdxType:"Figure"},"Dynamic Graph Wrap and Clear example"),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-scroll-example.gif",mdxType:"Figure"},"Dynamic Graph Scroll example"),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-wrap-and-overwrite-example.gif",mdxType:"Figure"},"Dynamic Graph Wrap and Overwrite example"),(0,n.kt)("h3",f({},{id:"graph-area-margin-and-padding"}),"Graph Area, Margin and Padding"),(0,n.kt)("p",null,"The Dynamic Graph renders all graph elements and grid lines in a Graph Area, incapsulated by padding and margin. If both padding or margin are defined as zero, the Graph Area will follow the the size given to the Dynamic Graph."),(0,n.kt)("p",null,"To make space for labels along the x- and y-axis, a margin can be defined.\nThe Margin settings move the graph area that contains the graph elements ",(0,n.kt)("em",{parentName:"p"},"(Area, Boxes, Diamonds, etc.)")," inside the widget, reserving space for labels along the x- and y-axis."),(0,n.kt)("p",null,"In the figure below the red area represents a 20 px margin added to right, top, left and bottom."),(0,n.kt)("p",null,"Depending on their sizes, some elements will not be shown fully if they are positioned close to the edges of the Graph Area, therefore a padding can be defined.\nThe Padding settings add some padding inside the graph area that contains the graph elements ",(0,n.kt)("em",{parentName:"p"},"(Area, Boxes, Diamonds, etc.)"),", this will allow Grid lines, Boxes, Dots, Diamonds, Histogram and Line elements drawn at the edges of the Graph Area to be drawn fully."),(0,n.kt)("p",null,"Padding can also be used to create extra space between the labels along the axes and the Graph Area."),(0,n.kt)("p",null,"In the figure below the orange area represents a 20 px padding added to right, top, left and bottom. It also shows how the Boxes element is allowed to draw into the padded area."),(0,n.kt)(r.Z,{noShadow:"true",imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-margin-padding-example.png",mdxType:"Figure"},"Dynamic Graph margin and padding example"),(0,n.kt)("h3",f({},{id:"elements"}),"Elements"),(0,n.kt)("p",null,"The Dynamic Graph has six available element types to display data: Area, Boxes, Diamonds, Dots, Histogram and Line"),(0,n.kt)("h4",f({},{id:"area"}),"Area"),(0,n.kt)("p",null,"The Area element will fill the area below the line connecting the data points in the graph."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-area-example.png",mdxType:"Figure"},"Dynamic Graph Area example"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Image")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which image to use as fill for the area.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Color")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which color to use as fill for the area.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Baseline")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the base of the area drawn. Normally, the base is 0 which means that the area is drawn below positive y values and above negative y values.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Alpha")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the transparency of the area. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")))),(0,n.kt)("h5",f({},{id:"api-reference"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_area",mdxType:"Link"},"API reference for the GraphElementArea class"))),(0,n.kt)("h4",f({},{id:"boxes"}),"Boxes"),(0,n.kt)("p",null,"The Boxes element will draw a square box for every data point in graph."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-boxes-example.png",mdxType:"Figure"},"Dynamic Graph Boxes example"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Color")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which color to use as fill for the boxes.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Box Size")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the size of the boxes.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Alpha")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the transparency of the boxes. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")))),(0,n.kt)("h5",f({},{id:"api-reference-1"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_boxes",mdxType:"Link"},"API reference for the GraphElementBoxes class"))),(0,n.kt)("h4",f({},{id:"diamonds"}),"Diamonds"),(0,n.kt)("p",null,"The Diamonds element will draw a diamond (a square with the corners up/down/left/right) for every data point in graph."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-diamonds-example.png",mdxType:"Figure"},"Dynamic Graph Diamonds example"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Image")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which image to use as fill for the diamonds.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Color")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which color to use as fill for the diamonds.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Diamond Size")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the size of the diamonds")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Alpha")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the transparency of the diamonds. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")))),(0,n.kt)("h5",f({},{id:"api-reference-2"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_diamonds",mdxType:"Link"},"API reference for the Graph Element Diamonds class"))),(0,n.kt)("h4",f({},{id:"dots"}),"Dots"),(0,n.kt)("p",null,"The Dots element will draw a circular dot for every data point in graph."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-dots-example.png",mdxType:"Figure"},"Dynamic Graph Dots example"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Image")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which image to use as fill for the dots.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Color")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which color to use as fill for the dots.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Dot Size")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the size of the dots")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Alpha")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the transparency of the dots. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")))),(0,n.kt)("h5",f({},{id:"api-reference-3"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_dots",mdxType:"Link"},"API reference for the GraphElementDots class"))),(0,n.kt)("h4",f({},{id:"histogram"}),"Histogram"),(0,n.kt)("p",null,"The Histogram element is used to draw blocks from the x-axis to the data point in the graph. If more graphs are placed on top of each other, the histogram can be moved slightly to the left/right."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-histogram-example.png",mdxType:"Figure"},"Dynamic Graph Histogram example"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Image")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which image to use as fill for the histogram.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Color")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which color to use as fill for the histogram.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Bar Width")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies width of the histogram bars.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Bar Offset")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies bar offset along the horizontal axis.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Baseline")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the base of the histogram drawn. Normally, the base is 0 which means that the histogram is drawn below positive y values and above negative y values.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Alpha")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the transparency of the histogram. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")))),(0,n.kt)("h5",f({},{id:"api-reference-4"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_histogram",mdxType:"Link"},"API reference for the GraphElementHistogram class"))),(0,n.kt)("h4",f({},{id:"line"}),"Line"),(0,n.kt)("p",null,"The Line element will draw a line with a given thickness through the data points in the graph."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-line-example.png",mdxType:"Figure"},"Dynamic Graph Line example"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Image")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which image to use as fill for the line.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Color")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which color to use as fill for the line.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Line Width")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the width of the line")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Alpha")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the transparency of the line. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")))),(0,n.kt)("h5",f({},{id:"api-reference-5"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_line",mdxType:"Link"},"API reference for the GraphElementLine class"))),(0,n.kt)("h3",f({},{id:"grid-lines"}),"Grid Lines"),(0,n.kt)("p",null,"The Dynamic Graph can have horizontal and vertical grid lines in both major and minor divisions."),(0,n.kt)("p",null,"Minor divisions are overruled by major divisions, such that minor divisions will not be drawn on locations where major divisions are present."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-grid-lines-example.png",mdxType:"Figure"},"Dynamic Graph Grid Lines example"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Color")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which color to use as fill for the grid line.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Interval")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the interval at which grid lines should be drawn")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Line Width")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the width of the grid line")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Alpha")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the transparency of the line. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")))),(0,n.kt)("h4",f({},{id:"api-reference-6"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_grid_base",mdxType:"Link"},"API reference for the GraphElementGridBase class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_grid_x",mdxType:"Link"},"API reference for the GraphElementGridX class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_element_grid_y",mdxType:"Link"},"API reference for the GraphElementGridY class"))),(0,n.kt)("h3",f({},{id:"labels"}),"Labels"),(0,n.kt)("p",null,".\nThe Dynamic Graph can have x-axis and y-axis labels displaying the value in both major and minor divisions."),(0,n.kt)("p",null,"Minor divisions are overruled by major divisions, such that minor divisions will not be drawn on locations where major divisions are present."),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-components/dynamic-graph/dynamic-graph-labels-example.png",mdxType:"Figure"},"Dynamic Graph Labels example"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Property Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Position")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the location of the labels.",(0,n.kt)("br",null),'Possible locations for x-axis labels are "Top" and "Bottom"',(0,n.kt)("br",null),'Possible locations for y-axis labels are "Left" and "Right"')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Text")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("em",{parentName:"td"},"ID")," specifies the text that is used. ",(0,n.kt)("em",{parentName:"td"},"If the widget uses an auto-generated text, the ID will display 'Auto-generated'"),".",(0,n.kt)("br",null),(0,n.kt)("br",null)," ",(0,n.kt)("em",{parentName:"td"},"Translation")," specifies the content of the text to be displayed.",(0,n.kt)("br",null),(0,n.kt)("br",null)," ",(0,n.kt)("em",{parentName:"td"},"Typography")," specifies the format of the text.",(0,n.kt)("br",null),(0,n.kt)("br",null)," ",(0,n.kt)("em",{parentName:"td"},"Alignment")," specifies the horizontal alignment of the text.",(0,n.kt)("br",null),(0,n.kt)("br",null)," For more details on text configuration, refer to the ",(0,n.kt)("a",f({parentName:"td"},{href:"../../touchgfx-engine-features/texts-and-fonts"}),"Using texts and fonts")," section.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Text Rotation")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),'Specifies the rotation of the labels, possible values are "0", "90", "180" and "270".')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Text Color")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies which color to use as fill for the labes.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Interval")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the interval at which labels should be drawn")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Number of Decimals")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the number of decimals the labels along the axis should show.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Decimal Separator")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies whether to use ',' or '.' as the decimal separator.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Alpha")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Specifies the transparency of the line. ",(0,n.kt)("em",{parentName:"td"},"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid"),".")))),(0,n.kt)("h4",f({},{id:"api-reference-7"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_labels_base",mdxType:"Link"},"API reference for the GraphLabelsBase class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_labels_x",mdxType:"Link"},"API reference for the GraphLabelX class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_labels_y",mdxType:"Link"},"API reference for the GraphLabelsY class"))),(0,n.kt)("h2",f({},{id:"interactions"}),"Interactions"),(0,n.kt)("p",null,"The actions and triggers supported by a Dynamic Graph in TouchGFX Designer."),(0,n.kt)("h3",f({},{id:"actions"}),"Actions"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Standard widget actions")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Move widget")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Move a widget to a new position over time.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Fade widget")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Modify alpha value of widget over time.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Hide widget")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Hides a widget (sets visibility to false).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Show widget")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"Make a hidden widget visible (sets visibility to true).")))),(0,n.kt)("h3",f({},{id:"triggers"}),"Triggers"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Trigger")),(0,n.kt)("th",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Graph Clicked")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"A Dynamic Graph has been clicked.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"td"},"Graph Dragged")),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"A Dynamic Graph has been dragged across.")))),(0,n.kt)("h2",f({},{id:"performance"}),"Performance"),(0,n.kt)("p",null,"The Dynamic Graph performance will vary, depending upon the setup of the widget."),(0,n.kt)("p",null,"The chosen dynamic behavior impacts the performance."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'"Wrap And Clear" is a fast performing behavior because it only draws the newest data point added.'),(0,n.kt)("li",{parentName:"ul"},'"Wrap And Overwrite" is a fast performing behavior because it only draws the newest data point added.'),(0,n.kt)("li",{parentName:"ul"},'"Scroll" is a demanding behavior, since everytime a data point is added, all the previous data points visible also need to be redrawn.')),(0,n.kt)("p",null,"Certain graph elements will be faster to draw."),(0,n.kt)("p",null,(0,n.kt)("a",f({parentName:"p"},{href:"#boxes"}),"Boxes")," and ",(0,n.kt)("a",f({parentName:"p"},{href:"#histogram"}),"Histogram")," are the fastest performing graph elements, because they do not have to read any pixel data or do any complicated calculations."),(0,n.kt)("p",null,(0,n.kt)("a",f({parentName:"p"},{href:"#area"}),"Area"),", ",(0,n.kt)("a",f({parentName:"p"},{href:"#diamonds"}),"Diamonds"),", ",(0,n.kt)("a",f({parentName:"p"},{href:"#dots"}),"Dots")," and ",(0,n.kt)("a",f({parentName:"p"},{href:"#line"}),"Line"),", are CanvasWidgets and are heavily dependent on the MCU for rendering."),(0,n.kt)("p",null,"For more details on drawing performance, read the ",(0,n.kt)("a",f({parentName:"p"},{href:"../general-ui-component-performance"}),"General UI Component Performance")," section."),(0,n.kt)("h2",f({},{id:"examples"}),"Examples"),(0,n.kt)("h3",f({},{id:"generated-code"}),"Generated Code"),(0,n.kt)("p",null,"In the generated code for the View base class we can see how the Designer sets up a Dynamic Graph."),(0,n.kt)(s.Z,{mdxType:"CodeHeader"},"Screen1ViewBase.cpp"),(0,n.kt)("pre",null,(0,n.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"dynamicGraph.setScale(1);\ndynamicGraph.setPosition(0, 0, 320, 240);\ndynamicGraph.setGraphLabelPadding(0, 0, 0, 0);\ndynamicGraph.setGraphPadding(0, 0, 0, 0);\ndynamicGraph.setGraphRangeY(0, 100);\n\ndynamicGraphLine1.setScale(1);\ndynamicGraphLine1Painter.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));\ndynamicGraphLine1.setPainter(dynamicGraphLine1Painter);\ndynamicGraphLine1.setLineWidth(2);\ndynamicGraph.addGraphElement(dynamicGraphLine1);\n")),(0,n.kt)(l.Z,{mdxType:"Tip"},"You can use these functions and the others available in the DynamicGraph class in user code. Remember to force a redraw by calling ",(0,n.kt)(o.Z,{mdxType:"InlineCode"},"dynamicGraph.invalidate()")," if you change the appearance of the widget."),(0,n.kt)("h3",f({},{id:"user-code"}),"User Code"),(0,n.kt)("p",null,"To add data points to the Dynamic Graph, the method ",(0,n.kt)("inlineCode",{parentName:"p"},"addDataPoint()")," is used. The following code example shows how to add data points to a Dynamic Graph, by overwriting the ",(0,n.kt)("inlineCode",{parentName:"p"},"handleTickEvent()")," method."),(0,n.kt)(s.Z,{mdxType:"CodeHeader"},"Screen1View.hpp"),(0,n.kt)("pre",null,(0,n.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"class Screen1View\n{\npublic:\n    Screen1View();\n    virtual ~Screen1View() {}\n    virtual void setupScreen();\n    virtual void tearDownScreen();\nprotected:\n    int tickCounter;\n    void handleTickEvent();\n};\n")),(0,n.kt)(s.Z,{mdxType:"CodeHeader"},"Screen1View.cpp"),(0,n.kt)("pre",null,(0,n.kt)("code",f({parentName:"pre"},{className:"language-cpp"}),"#include <gui/screen1_screen/Screen1View.hpp>\n\nScreen1View::Screen1View()\n{\n    tickCounter = 0;\n}\n\nvoid Screen1View::handleTickEvent()\n{\n    tickCounter++;\n\n    // Insert each second tick\n    if (tickCounter % 2 == 0)\n    {\n      // Insert data point\n      dynamicGraph.addDataPoint(/* Your data point here, either float or integer */);\n    }\n}\n")),(0,n.kt)("h3",f({},{id:"touchgfx-designer-examples"}),"TouchGFX Designer Examples"),(0,n.kt)("p",null,"To further explore the Dynamic Graph, try creating a new application within TouchGFX Designer with one of the following UI templates:"),(0,n.kt)(r.Z,{imageSource:"/img/development/ui-development/ui-templates/dynamic-graph-example-v4.17.png",mdxType:"Figure"},"Dynamic Graph Example UI template in TouchGFX Designer"),(0,n.kt)("h2",f({},{id:"api-reference-8"}),"API Reference"),(0,n.kt)(i.Z,{mdxType:"FurtherReading"},(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_scroll",mdxType:"Link"},"API reference for the GraphScroll class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_scroll_data",mdxType:"Link"},"API reference for the GraphScrollData class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_wrap_and_clear",mdxType:"Link"},"API reference for the GraphWrapAndClear class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_wrap_and_clear_data",mdxType:"Link"},"API reference for the GraphWrapAndClearData class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_wrap_and_overwrite",mdxType:"Link"},"API reference for the GraphWrapAndOverwrite class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_graph_wrap_and_overwrite_data",mdxType:"Link"},"API reference for the GraphWrapAndOverwriteData class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_dynamic_data_graph",mdxType:"Link"},"API reference for the DynamicDataGraph class")),(0,n.kt)("li",null,(0,n.kt)(p.Z,{to:"../../../../api/classes/classtouchgfx_1_1_abstract_data_graph",mdxType:"Link"},"API reference for the AbstractDataGraph class"))))}D.isMDXComponent=!0}}]);