"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[4575],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),d=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(r),h=n,m=p["".concat(c,".").concat(h)]||p[h]||s[h]||o;return r?a.createElement(m,i(i({ref:t},u),{},{components:r})):a.createElement(m,i({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},70814:function(e,t,r){var a=r(67294),n=r(88678);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},a.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}));class i extends a.Component{render(){return a.createElement(n.Z,{color:"var(--highlight-color-caution)",header:"Caution",type:"caution",icon:o},this.props.children)}}t.Z=i},44035:function(e,t,r){var a=r(67294),n=r(25026);t.Z=function(e){const t=e.noShadow||!1,r=e.width,o=e.height,i=(0,n.Z)(e.imageSource);return t?a.createElement("div",{className:"figure noshadow"},a.createElement("a",{href:i,target:"_blank"},a.createElement("img",{width:r,height:o,src:i})),a.createElement("p",null,e.children)):a.createElement("div",{className:"figure"},a.createElement("a",{href:i,target:"_blank"},a.createElement("img",{width:r,height:o,src:i})),a.createElement("p",null,e.children))}},29415:function(e,t,r){var a=r(67294),n=r(88678);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}));class i extends a.Component{render(){return a.createElement(n.Z,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:o},this.props.children)}}t.Z=i},88678:function(e,t,r){var a=r(67294);class n extends a.Component{render(){const e=`highlight highlight-${this.props.type}`;return a.createElement("div",{className:e},a.createElement("div",{className:"highlight-heading"},a.createElement("h5",null,a.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),a.createElement("div",{className:"highlight-content"},this.props.children))}}t.Z=n},93054:function(e,t,r){var a=r(67294),n=r(88678);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class i extends a.Component{render(){return a.createElement(n.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:o},this.props.children)}}t.Z=i},37793:function(e,t,r){var a=r(67294),n=r(88678);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}));class i extends a.Component{render(){return a.createElement(n.Z,{color:"var(--highlight-color-tip)",header:"Tip",type:"tip",icon:o},this.props.children)}}t.Z=i},78483:function(e,t,r){r.r(t),r.d(t,{assets:function(){return w},contentTitle:function(){return k},default:function(){return G},frontMatter:function(){return b},metadata:function(){return y},toc:function(){return x}});var a=r(3905),n=r(44035),o=r(29415),i=r(39130),l=r(70814),c=r(93054),d=r(37793),u=Object.defineProperty,s=Object.defineProperties,p=Object.getOwnPropertyDescriptors,h=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable,g=(e,t,r)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,v=(e,t)=>{for(var r in t||(t={}))m.call(t,r)&&g(e,r,t[r]);if(h)for(var r of h(t))f.call(t,r)&&g(e,r,t[r]);return e};const b={id:"additional-features",title:"Additional Features",sidebar_label:"Additional Features"},k=void 0,y={unversionedId:"development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/additional-features",id:"development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/additional-features",title:"Additional Features",description:"",source:"@site/i18n/zh-TW/docusaurus-plugin-content-docs/current/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/additional-features.mdx",sourceDirName:"development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration",slug:"/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/additional-features",permalink:"/4.21/zh-TW/docs/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/additional-features",draft:!1,tags:[],version:"current",frontMatter:{id:"additional-features",title:"Additional Features",sidebar_label:"Additional Features"},sidebar:"docs",previous:{title:"Driver",permalink:"/4.21/zh-TW/docs/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/driver"},next:{title:"Video Decoding",permalink:"/4.21/zh-TW/docs/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/video-decoding"}},w={},x=[{value:"External Data Reader",id:"external-data-reader",level:2},{value:"Vector Rendering",id:"vector-rendering",level:2},{value:"8bit LTDC Color Look-up Table",id:"8bit-ltdc-color-look-up-table",level:2}],T={toc:x};function G(e){var t,r=e,{components:u}=r,g=((e,t)=>{var r={};for(var a in e)m.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&h)for(var a of h(e))t.indexOf(a)<0&&f.call(e,a)&&(r[a]=e[a]);return r})(r,["components"]);return(0,a.kt)("wrapper",(t=v(v({},T),g),s(t,p({components:u,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"The Additional Features group appears if any additional features are available in the project configuration."),(0,a.kt)(n.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/touchgfx-generator/additional-features-settings.webp",width:"350",mdxType:"Figure"},"TouchGFX Generator Additional Features settings"),(0,a.kt)("h2",v({},{id:"external-data-reader"}),"External Data Reader"),(0,a.kt)("p",null,"For the RGB565 Framebuffer Pixel Format, TouchGFX supports a ",(0,a.kt)("em",{parentName:"p"},"Data Reader")," interface that allows developers to read data directly from a non-memory-mapped serial flash instead of ",(0,a.kt)("a",v({parentName:"p"},{href:"../../../ui-development/touchgfx-engine-features/caching-bitmaps"}),"caching")," which comes at the cost of an additional buffer in memory. Please see the ",(0,a.kt)("a",v({parentName:"p"},{href:"../../../scenarios/using-serial-flash"}),"SerialFlash")," article for a example on how to implement a DataReader to retrieve application assets from a non-memory mapped flash chip."),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"Data Reader")," option is typically used for low cost solutions (e.g. STM32G0) that do not have enough memory for additional buffers."),(0,a.kt)("p",null,"The following configurations can be made by the developer:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"External Data Reader"),": Enable or Disable the feature. Enabling will cause TouchGFX to retrieve data for assets directly through the generated interface. If disabled, developers are then required to ",(0,a.kt)("em",{parentName:"li"},"cache")," images to a buffer in memory instead."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"External Data Reader: Memory base address"),": Specifies the start address of the external data reader memory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"External Data Reader: Memory size"),": Specifies the size of the external data reader memory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"External Data Reader: Line Buffer Size"),": Creates two buffers for blending images or text into the framebuffer. Default value is : one screen width*4 bytes, to support full size images in ARGB8888 pixel format."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"External Data Reader: Minimum DMA transfer size"),": Set minimum required bytes to start a DMA transfer. If fewer bytes are requested, DMA will not be used.")),(0,a.kt)("p",null,"After generating code with ",(0,a.kt)("em",{parentName:"p"},"External Data Reader")," enabled, the following additional files are created by TouchGFX Generator to support the retrieval of assets directly from a non-memory mapped flash."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TouchGFX/target/generated/TouchGFXGeneratedDataReader.cpp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TouchGFX/target/generated/TouchGFXGeneratedDataReader.hpp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TouchGFX/target/TouchGFXDataReader.cpp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TouchGFX/target/TouchGFXDataReader.hpp"))),(0,a.kt)("p",null,"As usual for the AL architecture generated by TouchGFX Generator, ",(0,a.kt)("inlineCode",{parentName:"p"},"TouchGFXGeneratedDataReader")," is read-only and user modifications should be made inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"TouchGFXDataReader")," class. ",(0,a.kt)("inlineCode",{parentName:"p"},"TouchGFXGeneratedDataReader")," is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"touchgfx::FlashDataReader"),"."),(0,a.kt)("p",null,"Modifications will be made to the following files to configure TouchGFX HAL, in order to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"DataReader"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TouchGFX/target/generated/TouchGFXConfiguration.cpp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TouchGFX/target/generated/TouchGFXGeneratedHAL.cpp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TouchGFX/target/generated/TouchGFXGeneratedHAL.hpp"))),(0,a.kt)(c.Z,{mdxType:"Note"},"The DataReader Additional Feature is only available if DMA2D and LTDC are disabled."),(0,a.kt)("h2",v({},{id:"vector-rendering"}),"Vector Rendering"),(0,a.kt)("p",null,"To be able to configure Vector Rendering in TouchGFX Generator the framebuffer pixel format must be RGB565 or RGB888. The developer has two options when it comes to Vector Rendering capabilities:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Enabled")," - Enables Vector Rendering support for the application. Required if the SVGImage widget is used in TouchGFX Designer."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Disabled")," - Disables Vector Rendering support for the application.")),(0,a.kt)(l.Z,{mdxType:"Caution"},"Check that ",(0,a.kt)("b",null,"Vector Rendering")," is set to enabled in TouchGFX Generator if you want to use the SVGImage widget from TouchGFX Designer in your application. Otherwise, you will get a ",(0,a.kt)("b",null,'"no definition for touchgfx::VectorRenderer::getInstance()"')," error during compilation."),(0,a.kt)(d.Z,{mdxType:"Tip"},"If your device has GPU2D (NeoChrom) available (e.g. STM32U599), you can enable it for optimal vector rendering performance."),(0,a.kt)(o.Z,{mdxType:"FurtherReading"},"See the ",(0,a.kt)(i.Z,{to:"../../../ui-development/touchgfx-engine-features/svg",mdxType:"Link"},"SVG")," article for more information on how SVGs are rendered in TouchGFX."),(0,a.kt)("h2",v({},{id:"8bit-ltdc-color-look-up-table"}),"8bit LTDC Color Look-up Table"),(0,a.kt)("p",null,"When the LTDC is configured to read the framebuffer in L8 format and TouchGFX renders in either ",(0,a.kt)("a",v({parentName:"p"},{href:"../../../../api/classes/classtouchgfx_1_1_l_c_d8bpp___a_b_g_r2222"}),"ABRG2222"),", ",(0,a.kt)("a",v({parentName:"p"},{href:"../../../../api/classes/classtouchgfx_1_1_l_c_d8bpp___a_r_g_b2222"}),"ARGB222"),", ",(0,a.kt)("a",v({parentName:"p"},{href:"../../../../api/classes/classtouchgfx_1_1_l_c_d8bpp___b_g_r_a2222"}),"BGRA2222"),", or ",(0,a.kt)("a",v({parentName:"p"},{href:"../../../../api/classes/classtouchgfx_1_1_l_c_d8bpp___r_g_b_a2222"}),"RGBA2222"),", TouchGFX Generator will provide a CLUT which is loaded into the LTDC during ",(0,a.kt)("inlineCode",{parentName:"p"},"TouchGFXHAL::initialize()"),". Please refer to the STM32 MCU reference manual for more details on usage of LTDC and CLUT."))}G.isMDXComponent=!0}}]);